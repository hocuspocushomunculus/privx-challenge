<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 4.1.3 (Python 3.9.10 on linux)" generated="20220307 06:32:45.179" rpa="false" schemaversion="2">
<suite id="s1" name="Privx" source="/opt/robot_tests/privx.robot">
<test id="s1-t1" name="User is able to list all items">
<kw name="Initialize Item Database" library="privx" type="SETUP">
<doc>Before each test case, make sure the item database
has only but all of DEFAULT_ITEMS.
Benefit is, we are able to run the test suite multiple
times without having to restart the REST API server docker container.</doc>
<msg timestamp="20220307 06:32:45.288" level="INFO">Current items are not equal to DEFAULT_ITEMS, restoring database state.</msg>
<status status="PASS" starttime="20220307 06:32:45.282" endtime="20220307 06:32:45.321"/>
</kw>
<kw name="GET" library="RequestsLibrary">
<var>${response}</var>
<arg>${REST_API_URL}items/</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20220307 06:32:45.324" level="INFO">GET Request : url=http://rest_api_server:5000/items/ 
 path_url=/items/ 
 headers={'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20220307 06:32:45.325" level="INFO">GET Response : url=http://rest_api_server:5000/items/ 
 status=200, reason=OK 
 headers={'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '100', 'Server': 'Werkzeug/2.0.3 Python/3.9.10', 'Date': 'Mon, 07 Mar 2022 06:32:45 GMT'} 
 body=[{"name": "item_0"}, {"name": "item_1"}, {"name": "item_2"}, {"name": "item_3"}, {"name": "item_4"}] 
 </msg>
<msg timestamp="20220307 06:32:45.325" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220307 06:32:45.321" endtime="20220307 06:32:45.325"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${200}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20220307 06:32:45.325" endtime="20220307 06:32:45.327"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${response.json()}</arg>
<arg>${default_items}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20220307 06:32:45.327" endtime="20220307 06:32:45.328"/>
</kw>
<doc>Make a GET request to /items/ endpoint
of the REST API server and validate the returned value.</doc>
<status status="PASS" starttime="20220307 06:32:45.281" endtime="20220307 06:32:45.328"/>
</test>
<test id="s1-t2" name="User is able to filter items">
<kw name="Initialize Item Database" library="privx" type="SETUP">
<doc>Before each test case, make sure the item database
has only but all of DEFAULT_ITEMS.
Benefit is, we are able to run the test suite multiple
times without having to restart the REST API server docker container.</doc>
<status status="PASS" starttime="20220307 06:32:45.329" endtime="20220307 06:32:45.336"/>
</kw>
<kw name="GET" library="RequestsLibrary">
<var>${response}</var>
<arg>${REST_API_URL}items/?name\=item_2</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20220307 06:32:45.341" level="INFO">GET Request : url=http://rest_api_server:5000/items/?name=item_2 
 path_url=/items/?name=item_2 
 headers={'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20220307 06:32:45.341" level="INFO">GET Response : url=http://rest_api_server:5000/items/?name=item_2 
 status=200, reason=OK 
 headers={'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '20', 'Server': 'Werkzeug/2.0.3 Python/3.9.10', 'Date': 'Mon, 07 Mar 2022 06:32:45 GMT'} 
 body=[{"name": "item_2"}] 
 </msg>
<msg timestamp="20220307 06:32:45.341" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220307 06:32:45.336" endtime="20220307 06:32:45.341"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${200}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20220307 06:32:45.342" endtime="20220307 06:32:45.343"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${response.json()}[0]</arg>
<arg>${ITEM_2}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20220307 06:32:45.344" endtime="20220307 06:32:45.345"/>
</kw>
<kw name="GET" library="RequestsLibrary">
<var>${response}</var>
<arg>${REST_API_URL}items/?name\=no_such_name</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20220307 06:32:45.353" level="INFO">GET Request : url=http://rest_api_server:5000/items/?name=no_such_name 
 path_url=/items/?name=no_such_name 
 headers={'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20220307 06:32:45.353" level="INFO">GET Response : url=http://rest_api_server:5000/items/?name=no_such_name 
 status=200, reason=OK 
 headers={'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '2', 'Server': 'Werkzeug/2.0.3 Python/3.9.10', 'Date': 'Mon, 07 Mar 2022 06:32:45 GMT'} 
 body=[] 
 </msg>
<msg timestamp="20220307 06:32:45.353" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220307 06:32:45.345" endtime="20220307 06:32:45.353"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${200}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20220307 06:32:45.354" endtime="20220307 06:32:45.356"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${response.json()}</arg>
<arg>${EMPTY_LIST}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20220307 06:32:45.356" endtime="20220307 06:32:45.357"/>
</kw>
<doc>Make a GET request to /items/?param=value
endpoint of the REST API server and validate the returned value.
Also test for filtering item with no matching key &amp; value.</doc>
<status status="PASS" starttime="20220307 06:32:45.328" endtime="20220307 06:32:45.358"/>
</test>
<test id="s1-t3" name="User is able to get item by name">
<kw name="Initialize Item Database" library="privx" type="SETUP">
<doc>Before each test case, make sure the item database
has only but all of DEFAULT_ITEMS.
Benefit is, we are able to run the test suite multiple
times without having to restart the REST API server docker container.</doc>
<status status="PASS" starttime="20220307 06:32:45.359" endtime="20220307 06:32:45.369"/>
</kw>
<kw name="GET" library="RequestsLibrary">
<var>${response}</var>
<arg>${REST_API_URL}items/item_2</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20220307 06:32:45.373" level="INFO">GET Request : url=http://rest_api_server:5000/items/item_2 
 path_url=/items/item_2 
 headers={'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20220307 06:32:45.373" level="INFO">GET Response : url=http://rest_api_server:5000/items/item_2 
 status=200, reason=OK 
 headers={'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '18', 'Server': 'Werkzeug/2.0.3 Python/3.9.10', 'Date': 'Mon, 07 Mar 2022 06:32:45 GMT'} 
 body={"name": "item_2"} 
 </msg>
<msg timestamp="20220307 06:32:45.374" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220307 06:32:45.370" endtime="20220307 06:32:45.374"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${200}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20220307 06:32:45.374" endtime="20220307 06:32:45.375"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${response.json()}</arg>
<arg>${ITEM_2}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20220307 06:32:45.376" endtime="20220307 06:32:45.377"/>
</kw>
<kw name="Run Keyword And Expect Error" library="BuiltIn">
<arg>HTTPError: 404 Client Error*</arg>
<arg>GET</arg>
<arg>${REST_API_URL}items/non_existent_item</arg>
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<kw name="GET" library="RequestsLibrary">
<arg>${REST_API_URL}items/non_existent_item</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20220307 06:32:45.384" level="INFO">GET Request : url=http://rest_api_server:5000/items/non_existent_item 
 path_url=/items/non_existent_item 
 headers={'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20220307 06:32:45.384" level="INFO">GET Response : url=http://rest_api_server:5000/items/non_existent_item 
 status=404, reason=NOT FOUND 
 headers={'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '46', 'Server': 'Werkzeug/2.0.3 Python/3.9.10', 'Date': 'Mon, 07 Mar 2022 06:32:45 GMT'} 
 body={"error": "Item not found: non_existent_item"} 
 </msg>
<msg timestamp="20220307 06:32:45.385" level="FAIL">HTTPError: 404 Client Error: NOT FOUND for url: http://rest_api_server:5000/items/non_existent_item</msg>
<status status="FAIL" starttime="20220307 06:32:45.377" endtime="20220307 06:32:45.386"/>
</kw>
<status status="PASS" starttime="20220307 06:32:45.377" endtime="20220307 06:32:45.386"/>
</kw>
<doc>Make a GET request to /items/&lt;name&gt;/ endpoint
of the REST API server and validate the returned value.
Also test for non-existent item.</doc>
<status status="PASS" starttime="20220307 06:32:45.358" endtime="20220307 06:32:45.386"/>
</test>
<test id="s1-t4" name="User is able to add new item">
<kw name="Initialize Item Database" library="privx" type="SETUP">
<doc>Before each test case, make sure the item database
has only but all of DEFAULT_ITEMS.
Benefit is, we are able to run the test suite multiple
times without having to restart the REST API server docker container.</doc>
<status status="PASS" starttime="20220307 06:32:45.388" endtime="20220307 06:32:45.396"/>
</kw>
<kw name="POST" library="RequestsLibrary">
<var>${response}</var>
<arg>${REST_API_URL}items</arg>
<arg>json=${NEW_ITEM}</arg>
<doc>Sends a POST request.</doc>
<msg timestamp="20220307 06:32:45.405" level="INFO">POST Request : url=http://rest_api_server:5000/items (redirected) 
 path_url=/items 
 headers={'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '49', 'Content-Type': 'application/json'} 
 body=b'{"name": "new_item", "id": "foo", "price": "baz"}' 
 </msg>
<msg timestamp="20220307 06:32:45.405" level="INFO">POST Response : url=http://rest_api_server:5000/items/ 
 status=201, reason=CREATED 
 headers={'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '49', 'Server': 'Werkzeug/2.0.3 Python/3.9.10', 'Date': 'Mon, 07 Mar 2022 06:32:45 GMT'} 
 body={"name": "new_item", "id": "foo", "price": "baz"} 
 </msg>
<msg timestamp="20220307 06:32:45.405" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20220307 06:32:45.397" endtime="20220307 06:32:45.405"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${201}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20220307 06:32:45.406" endtime="20220307 06:32:45.407"/>
</kw>
<kw name="GET" library="RequestsLibrary">
<var>${response}</var>
<arg>${REST_API_URL}items/?name\=${NEW_ITEM['name']}</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20220307 06:32:45.416" level="INFO">GET Request : url=http://rest_api_server:5000/items/?name=new_item 
 path_url=/items/?name=new_item 
 headers={'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20220307 06:32:45.416" level="INFO">GET Response : url=http://rest_api_server:5000/items/?name=new_item 
 status=200, reason=OK 
 headers={'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '51', 'Server': 'Werkzeug/2.0.3 Python/3.9.10', 'Date': 'Mon, 07 Mar 2022 06:32:45 GMT'} 
 body=[{"name": "new_item", "id": "foo", "price": "baz"}] 
 </msg>
<msg timestamp="20220307 06:32:45.416" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220307 06:32:45.407" endtime="20220307 06:32:45.416"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${200}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20220307 06:32:45.416" endtime="20220307 06:32:45.418"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${response.json()}[0]</arg>
<arg>${NEW_ITEM}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20220307 06:32:45.418" endtime="20220307 06:32:45.420"/>
</kw>
<kw name="Run Keyword And Expect Error" library="BuiltIn">
<arg>HTTPError: 400 Client Error*</arg>
<arg>POST</arg>
<arg>${REST_API_URL}items/</arg>
<arg>json=${NEW_ITEM}</arg>
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<kw name="POST" library="RequestsLibrary">
<arg>${REST_API_URL}items/</arg>
<arg>json=${NEW_ITEM}</arg>
<doc>Sends a POST request.</doc>
<msg timestamp="20220307 06:32:45.435" level="INFO">POST Request : url=http://rest_api_server:5000/items/ 
 path_url=/items/ 
 headers={'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '49', 'Content-Type': 'application/json'} 
 body=b'{"name": "new_item", "id": "foo", "price": "baz"}' 
 </msg>
<msg timestamp="20220307 06:32:45.435" level="INFO">POST Response : url=http://rest_api_server:5000/items/ 
 status=400, reason=BAD REQUEST 
 headers={'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '37', 'Server': 'Werkzeug/2.0.3 Python/3.9.10', 'Date': 'Mon, 07 Mar 2022 06:32:45 GMT'} 
 body={"error": "Duplicate name: new_item"} 
 </msg>
<msg timestamp="20220307 06:32:45.439" level="FAIL">HTTPError: 400 Client Error: BAD REQUEST for url: http://rest_api_server:5000/items/</msg>
<status status="FAIL" starttime="20220307 06:32:45.423" endtime="20220307 06:32:45.439"/>
</kw>
<status status="PASS" starttime="20220307 06:32:45.423" endtime="20220307 06:32:45.439"/>
</kw>
<kw name="Run Keyword And Expect Error" library="BuiltIn">
<arg>HTTPError: 400 Client Error*</arg>
<arg>POST</arg>
<arg>${REST_API_URL}items/</arg>
<arg>json=${NEW_ITEM_WITHOUT_NAME}</arg>
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<kw name="POST" library="RequestsLibrary">
<arg>${REST_API_URL}items/</arg>
<arg>json=${NEW_ITEM_WITHOUT_NAME}</arg>
<doc>Sends a POST request.</doc>
<msg timestamp="20220307 06:32:45.447" level="INFO">POST Request : url=http://rest_api_server:5000/items/ 
 path_url=/items/ 
 headers={'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '21', 'Content-Type': 'application/json'} 
 body=b'{"not_a_name": "xyz"}' 
 </msg>
<msg timestamp="20220307 06:32:45.447" level="INFO">POST Response : url=http://rest_api_server:5000/items/ 
 status=400, reason=BAD REQUEST 
 headers={'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '27', 'Server': 'Werkzeug/2.0.3 Python/3.9.10', 'Date': 'Mon, 07 Mar 2022 06:32:45 GMT'} 
 body={"error": "Name required!"} 
 </msg>
<msg timestamp="20220307 06:32:45.448" level="FAIL">HTTPError: 400 Client Error: BAD REQUEST for url: http://rest_api_server:5000/items/</msg>
<status status="FAIL" starttime="20220307 06:32:45.440" endtime="20220307 06:32:45.448"/>
</kw>
<status status="PASS" starttime="20220307 06:32:45.439" endtime="20220307 06:32:45.448"/>
</kw>
<doc>Make a POST request to /items/ endpoint
of the REST API server and validate the returned value.
Also test the negative cases:
- no "name" field provided in json data
- trying to add already existent item</doc>
<status status="PASS" starttime="20220307 06:32:45.387" endtime="20220307 06:32:45.448"/>
</test>
<test id="s1-t5" name="User is able to delete an item by name">
<kw name="Initialize Item Database" library="privx" type="SETUP">
<doc>Before each test case, make sure the item database
has only but all of DEFAULT_ITEMS.
Benefit is, we are able to run the test suite multiple
times without having to restart the REST API server docker container.</doc>
<msg timestamp="20220307 06:32:45.458" level="INFO">Current items are not equal to DEFAULT_ITEMS, restoring database state.</msg>
<status status="PASS" starttime="20220307 06:32:45.452" endtime="20220307 06:32:45.531"/>
</kw>
<kw name="DELETE" library="RequestsLibrary">
<var>${response}</var>
<arg>${REST_API_URL}items/item_2</arg>
<doc>Sends a DELETE request.</doc>
<msg timestamp="20220307 06:32:45.538" level="INFO">DELETE Request : url=http://rest_api_server:5000/items/item_2 
 path_url=/items/item_2 
 headers={'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '0'} 
 body=None 
 </msg>
<msg timestamp="20220307 06:32:45.538" level="INFO">DELETE Response : url=http://rest_api_server:5000/items/item_2 
 status=204, reason=NO CONTENT 
 headers={'Content-Type': 'text/html; charset=utf-8', 'Server': 'Werkzeug/2.0.3 Python/3.9.10', 'Date': 'Mon, 07 Mar 2022 06:32:45 GMT'} 
 body=None 
 </msg>
<msg timestamp="20220307 06:32:45.538" level="INFO">${response} = &lt;Response [204]&gt;</msg>
<status status="PASS" starttime="20220307 06:32:45.531" endtime="20220307 06:32:45.538"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${204}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20220307 06:32:45.539" endtime="20220307 06:32:45.540"/>
</kw>
<kw name="Run Keyword And Expect Error" library="BuiltIn">
<arg>HTTPError: 404 Client Error*</arg>
<arg>GET</arg>
<arg>${REST_API_URL}items/item_2</arg>
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<kw name="GET" library="RequestsLibrary">
<arg>${REST_API_URL}items/item_2</arg>
<doc>Sends a GET request.</doc>
<msg timestamp="20220307 06:32:45.546" level="INFO">GET Request : url=http://rest_api_server:5000/items/item_2 
 path_url=/items/item_2 
 headers={'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20220307 06:32:45.546" level="INFO">GET Response : url=http://rest_api_server:5000/items/item_2 
 status=404, reason=NOT FOUND 
 headers={'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '35', 'Server': 'Werkzeug/2.0.3 Python/3.9.10', 'Date': 'Mon, 07 Mar 2022 06:32:45 GMT'} 
 body={"error": "Item not found: item_2"} 
 </msg>
<msg timestamp="20220307 06:32:45.547" level="FAIL">HTTPError: 404 Client Error: NOT FOUND for url: http://rest_api_server:5000/items/item_2</msg>
<status status="FAIL" starttime="20220307 06:32:45.541" endtime="20220307 06:32:45.547"/>
</kw>
<status status="PASS" starttime="20220307 06:32:45.540" endtime="20220307 06:32:45.547"/>
</kw>
<kw name="Run Keyword And Expect Error" library="BuiltIn">
<arg>HTTPError: 404 Client Error*</arg>
<arg>DELETE</arg>
<arg>${REST_API_URL}items/item_2</arg>
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<kw name="DELETE" library="RequestsLibrary">
<arg>${REST_API_URL}items/item_2</arg>
<doc>Sends a DELETE request.</doc>
<msg timestamp="20220307 06:32:45.553" level="INFO">DELETE Request : url=http://rest_api_server:5000/items/item_2 
 path_url=/items/item_2 
 headers={'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '0'} 
 body=None 
 </msg>
<msg timestamp="20220307 06:32:45.554" level="INFO">DELETE Response : url=http://rest_api_server:5000/items/item_2 
 status=404, reason=NOT FOUND 
 headers={'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '35', 'Server': 'Werkzeug/2.0.3 Python/3.9.10', 'Date': 'Mon, 07 Mar 2022 06:32:45 GMT'} 
 body={"error": "Item not found: item_2"} 
 </msg>
<msg timestamp="20220307 06:32:45.554" level="FAIL">HTTPError: 404 Client Error: NOT FOUND for url: http://rest_api_server:5000/items/item_2</msg>
<status status="FAIL" starttime="20220307 06:32:45.548" endtime="20220307 06:32:45.554"/>
</kw>
<status status="PASS" starttime="20220307 06:32:45.547" endtime="20220307 06:32:45.554"/>
</kw>
<doc>Make a DELETE request to /items/&lt;name&gt;/
endpoint of the REST API server and validate the returned value.
Also test removal of non-existent item</doc>
<status status="PASS" starttime="20220307 06:32:45.449" endtime="20220307 06:32:45.555"/>
</test>
<doc>PrivX REST API testing robot tests</doc>
<status status="PASS" starttime="20220307 06:32:45.180" endtime="20220307 06:32:45.555"/>
</suite>
<statistics>
<total>
<stat pass="5" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="5" fail="0" skip="0" id="s1" name="Privx">Privx</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
